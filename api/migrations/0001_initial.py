# Generated by Django 3.0.4 on 2020-05-02 14:55

import api.models.user.user_model
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('phone_number_hash', models.CharField(max_length=150, unique=True)),
                ('password', models.CharField(blank=True, max_length=128, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', api.models.user.user_model.HashedUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filled_on', models.DateTimeField(auto_now_add=True)),
                ('tag', models.UUIDField(default=uuid.uuid4)),
                ('temp_measurement', models.DecimalField(decimal_places=3, max_digits=5, null=True)),
                ('exposure_date', models.DateField(blank=True, null=True)),
                ('positive_test_date', models.DateField(blank=True, null=True)),
                ('negative_test_date', models.DateField(blank=True, null=True)),
                ('general_feeling', models.CharField(choices=[('SAME', 'SAME'), ('BETTER', 'BETTER'), ('WORSE', 'WORSE')], max_length=10, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
                ('display_name', models.TextField()),
                ('display_name_en', models.TextField(null=True)),
                ('display_name_he', models.TextField(null=True)),
                ('qtype', models.CharField(choices=[('CHECKBOX', 'CHECKBOX'), ('TEXT', 'TEXT'), ('MULTISELECT', 'MULTISELECT'), ('SELECT', 'SELECT'), ('RANGER', 'RANGER')], max_length=25)),
                ('order', models.IntegerField()),
                ('active', models.BooleanField(default=True)),
                ('extra_data', models.TextField(blank=True, null=True)),
                ('extra_data_en', models.TextField(blank=True, null=True)),
                ('extra_data_he', models.TextField(blank=True, null=True)),
                ('required', models.BooleanField(default=True)),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_questions', to='api.Question')),
            ],
        ),
        migrations.CreateModel(
            name='VoiceRecording',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recording_file', models.FileField(blank=True, null=True, upload_to='')),
                ('recording_metadata', models.TextField(blank=True, null=True)),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_voice_recordings', to='api.Measurement')),
            ],
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.IntegerField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, choices=[('MALE', 'MALE'), ('FEMALE', 'FEMALE'), ('NONBINARY', 'NONBINARY')], max_length=20, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('smoking_status', models.CharField(choices=[('NEVER', 'NEVER'), ('STOPPED', 'STOPPED'), ('CURRENT', 'CURRENT')], max_length=50, null=True)),
                ('background_diseases', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, null=True, size=None)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='api.Measurement')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='api.Question')),
            ],
        ),
        migrations.CreateModel(
            name='PPGMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('red', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('blue', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('green', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('timepoint', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('calibration_transform1', models.TextField(blank=True, null=True)),
                ('calibration_transform2', models.TextField(blank=True, null=True)),
                ('sensor_color_transform1', models.TextField(blank=True, null=True)),
                ('sensor_color_transform2', models.TextField(blank=True, null=True)),
                ('sensor_forward_matrix1', models.TextField(blank=True, null=True)),
                ('sensor_forward_matrix2', models.TextField(blank=True, null=True)),
                ('sensor_lens_shading_applied', models.BooleanField(blank=True, null=True)),
                ('sensor_sensitivity_range_lower', models.IntegerField(blank=True, null=True)),
                ('sensor_sensitivity_range_upper', models.IntegerField(blank=True, null=True)),
                ('sensor_white_level', models.IntegerField(blank=True, null=True)),
                ('sensor_max_analog_sensitivity', models.IntegerField(blank=True, null=True)),
                ('sensor_reference_illuminant1', models.IntegerField(blank=True, null=True)),
                ('sensor_reference_illuminant2', models.IntegerField(blank=True, null=True)),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ppg_measurements', to='api.Measurement')),
            ],
        ),
    ]
